name: Deploy Applications

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all, rennan-tech, engineer-lab)'
        required: false
        default: 'all'
  repository_dispatch:
    types: [deploy-app]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout infrastructure repo
        uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: us-east-1
          role-skip-session-tagging: true

      - name: Deploy to EC2
        run: |
          doppler run -- bash -c '
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=rennan-tech-server" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)

          if [ "$INSTANCE_ID" = "None" ] || [ "$INSTANCE_ID" = "null" ]; then
            echo "No running instance found"
            exit 1
          fi

          SERVICE="${{ github.event.inputs.service || github.event.client_payload.service || 'all' }}"
          IMAGE_TAG="${{ github.event.client_payload.image_tag || 'latest' }}"

          if [ "$SERVICE" = "all" ]; then
            DEPLOY_CMD="
              RENNAN_TECH_ECR_URI=\$(aws ssm get-parameter --name '/doppler/rennan-tech/landing/ECR_REPOSITORY_URI' --query 'Parameter.Value' --output text 2>/dev/null || echo 'public.ecr.aws/q9c0i8b3/rennan-tech') &&
              ENGINEER_LAB_ECR_URI=\$(aws ssm get-parameter --name '/doppler/rennan-tech/engineer-lab/ECR_REPOSITORY_URI' --query 'Parameter.Value' --output text 2>/dev/null || echo 'public.ecr.aws/q9c0i8b3/engineer-lab') &&
              echo RENNAN_TECH_ECR_URI=\$RENNAN_TECH_ECR_URI > .env &&
              echo ENGINEER_LAB_ECR_URI=\$ENGINEER_LAB_ECR_URI >> .env &&
              sudo docker compose --env-file .env down --remove-orphans &&
              sudo docker compose --env-file .env pull &&
              sudo docker compose --env-file .env up -d &&
              sudo docker image prune -f
            "
          else
            DEPLOY_CMD="
              RENNAN_TECH_ECR_URI=\$(aws ssm get-parameter --name '/doppler/rennan-tech/landing/ECR_REPOSITORY_URI' --query 'Parameter.Value' --output text 2>/dev/null || echo 'public.ecr.aws/q9c0i8b3/rennan-tech') &&
              ENGINEER_LAB_ECR_URI=\$(aws ssm get-parameter --name '/doppler/rennan-tech/engineer-lab/ECR_REPOSITORY_URI' --query 'Parameter.Value' --output text 2>/dev/null || echo 'public.ecr.aws/q9c0i8b3/engineer-lab') &&
              echo RENNAN_TECH_ECR_URI=\$RENNAN_TECH_ECR_URI > .env &&
              echo ENGINEER_LAB_ECR_URI=\$ENGINEER_LAB_ECR_URI >> .env &&
              sudo docker compose --env-file .env up -d $SERVICE &&
              sudo docker image prune -f
            "
          fi

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"cd /home/ubuntu/infra-rennan-tech\",
              \"$DEPLOY_CMD\"
            ]" \
            --query 'Command.CommandId' \
            --output text)

          echo "Command ID: $COMMAND_ID"

          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID

          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "StandardOutputContent" \
            --output text
          '
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

      - name: Verify deployment
        run: |
          doppler run -- bash -c '
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=rennan-tech-server" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "Testing deployment at: $INSTANCE_IP"
          sleep 30

          if curl -f "http://$INSTANCE_IP" > /dev/null 2>&1; then
            echo "✅ Main site is responding"
          else
            echo "❌ Main site is not responding"
            exit 1
          fi
          '
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
