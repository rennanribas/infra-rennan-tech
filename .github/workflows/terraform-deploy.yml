name: Deploy Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# These permissions are required for OIDC and secrets management
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '~1.5'

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          role-session-name: terraform-deploy-session
          aws-region: us-east-1
          role-skip-session-tagging: true

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.plan_output }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Set up GitHub CLI
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # GitHub CLI is pre-installed on ubuntu-latest runners
          gh --version

      - name: Configure secrets in application repositories
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get AWS Account ID and Instance ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          INSTANCE_ID=$(terraform output -raw instance_id)

          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          echo "Instance ID: $INSTANCE_ID"

          # Set secrets in rennan-tech-landing repository
          gh secret set AWS_ACCOUNT_ID --body "$AWS_ACCOUNT_ID" --repo ${{ github.repository_owner }}/rennan-tech-landing
          gh secret set INSTANCE_ID --body "$INSTANCE_ID" --repo ${{ github.repository_owner }}/rennan-tech-landing

          # Set secrets in engineer-lab repository
          gh secret set AWS_ACCOUNT_ID --body "$AWS_ACCOUNT_ID" --repo ${{ github.repository_owner }}/engineer-lab
          gh secret set INSTANCE_ID --body "$INSTANCE_ID" --repo ${{ github.repository_owner }}/engineer-lab

          echo "‚úÖ Secrets configured successfully in all repositories"
